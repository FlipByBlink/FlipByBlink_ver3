import UIKit
import PDFKit
import ARKit

class ðŸ„±ook_ViewController:UIViewController{
    
    @IBOutlet weak var ðŸ“–: PDFView!
    
    var ðŸ“š:PDFDocument!
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        ðŸ“–.autoScales = true
        ðŸ“–.displayMode = .singlePage
        ðŸ“–.displaysPageBreaks = false
        ðŸ“–.isUserInteractionEnabled = false
        ðŸ“–.accessibilityElementsHidden = true
        
        ðŸ“–.document = ðŸ“š
        if ðŸ“š.documentURL?.lastPathComponent == "ðŸ„¸mported.pdf"{
            if let ðŸ”– = ðŸ“š.page(at: UserDefaults.standard.integer(forKey: "ðŸ”–") - 1){
                ðŸ“–.go(to: ðŸ”–)
            }
        }
        
        UIApplication.shared.isIdleTimerDisabled = true
    }
    
    @IBAction func ðŸ„¶oToNextPage() {
        if ðŸ“–.canGoToNextPage == false{
            let ðŸ’¬ = UIAlertController(title: "ðŸŽ‰ Finish!", message: nil, preferredStyle: .alert)
            present(ðŸ’¬, animated: true)
            DispatchQueue.main.asyncAfter(deadline: .now() + 2){ ðŸ’¬.dismiss(animated: true) }
        }
        ðŸ“–.goToNextPage(nil)
    }
    
    
    @IBAction func ðŸ„¶oToPreviousPage() {
        ðŸ“–.goToPreviousPage(nil)
    }
    
    @IBAction func Tâƒ£ap(_ sender: UITapGestureRecognizer) {
        if sender.location(in: view).x > view.center.x{
            ðŸ„¶oToNextPage()
        }else{
            ðŸ„¶oToPreviousPage()
        }
    }
    @IBAction func ãƒŸðŸ‘†å½¡(_ sender: Any) {
        self.dismiss(animated: true)
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        ðŸ“–.autoScales = true
    }
    
    override var prefersHomeIndicatorAutoHidden: Bool {
        return true
    }
    
    override var prefersStatusBarHidden: Bool{
        return true
    }
    
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        if ðŸ“š.documentURL?.lastPathComponent == "ðŸ„¸mported.pdf"{
            UserDefaults.standard.set(ðŸ“–.currentPage!.pageRef!.pageNumber, forKey: "ðŸ”–")
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        if ARFaceTrackingConfiguration.isSupported == false{
            let ðŸ’¬ = UIAlertController(title: "Sorry ðŸ˜±", message: "your device can't work facetracking. \"Face tracking supports devices with Apple Neural Engine in iOS 14 and iPadOS 14 and requires a device with a TrueDepth camera on iOS 13 and iPadOS 13 and earlier.\" source:https://developer.apple.com/documentation/arkit/arfacetrackingconfiguration", preferredStyle: .alert)
            ðŸ’¬.addAction(UIAlertAction(title: "OK", style: .default))
            present(ðŸ’¬, animated: true)
        }
    }
    
}
